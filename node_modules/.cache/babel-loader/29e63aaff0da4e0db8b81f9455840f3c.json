{"ast":null,"code":"import _slicedToArray from \"/Users/theskymac/Desktop/Youtubeclone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/theskymac/Desktop/Youtubeclone/src/Components/Videoplayercontainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { API_KEY } from \"../Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Videoplayercontainer(_ref) {\n  _s();\n\n  var _this = this;\n\n  var videoId = _ref.videoId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var fetchComments = function fetchComments() {\n    axios({\n      method: \"GET\",\n      // url: `https://youtube.googleapis.com/youtube/v3/search?part=snippet&q=${searchQuery}&maxResults=200&key=${API_KEY}`,\n      url: \"https://youtube.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId=\".concat(videoId, \"&key=\").concat(API_KEY),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(function (res) {\n      setComments(res.data.items); //   localStorage.setItem(\"videos\", JSON.stringify(res.data.items));\n    }).catch(function (error) {\n      console.log(error); // alert(error.response.data.error.message);\n    });\n  };\n\n  useEffect(function () {\n    fetchComments();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playingVideo\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: \"Youtube Video Play\",\n        width: \"980\",\n        height: \"500\",\n        frameBorder: \"0\",\n        allowFullScreen: true,\n        allow: \"autoplay\",\n        src: \"https://www.youtube.com/embed/\".concat(videoId)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"videoRow\",\n      children: comments.map(function (video, index) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"videoInfo\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"videoPlayer\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: video.snippet.thumbnails.medium.url,\n              alt: video.snippet.title,\n              onClick: function onClick() {\n                return navigateToPlayThisVideo(video.id);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"channelLogoAndInfo\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"channelLogo\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: video.snippet.thumbnails.medium.url,\n                alt: video.snippet.channelTitle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"channelInfo\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"channelDescription\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  onClick: function onClick() {\n                    return navigateToPlayThisVideo(video.id);\n                  },\n                  children: video.snippet.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"channelName\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: video.snippet.channelTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"viewsAndUploadTime\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" . \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"uploadTime\",\n                  children: video.Uploadtime\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 21\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, _this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Videoplayercontainer, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n\n_c = Videoplayercontainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Videoplayercontainer\");","map":{"version":3,"sources":["/Users/theskymac/Desktop/Youtubeclone/src/Components/Videoplayercontainer/index.js"],"names":["React","useEffect","axios","API_KEY","Videoplayercontainer","videoId","useState","comments","setComments","fetchComments","method","url","headers","Accept","then","res","data","items","catch","error","console","log","map","video","index","snippet","thumbnails","medium","title","navigateToPlayThisVideo","id","channelTitle","Uploadtime"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { API_KEY } from \"../Header\";\nexport default function Videoplayercontainer({ videoId }) {\n  const [comments, setComments] = useState([]);\n  const fetchComments = () => {\n    axios({\n      method: \"GET\",\n      // url: `https://youtube.googleapis.com/youtube/v3/search?part=snippet&q=${searchQuery}&maxResults=200&key=${API_KEY}`,\n      url: `https://youtube.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId=${videoId}&key=${API_KEY}`,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => {\n        setComments(res.data.items);\n        //   localStorage.setItem(\"videos\", JSON.stringify(res.data.items));\n      })\n      .catch((error) => {\n        console.log(error);\n        // alert(error.response.data.error.message);\n      });\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n\n  return (\n    <>\n      {\" \"}\n      <div className=\"playingVideo\">\n        <iframe\n          title=\"Youtube Video Play\"\n          width=\"980\"\n          height=\"500\"\n          frameBorder=\"0\"\n          allowFullScreen\n          allow=\"autoplay\"\n          src={`https://www.youtube.com/embed/${videoId}`}\n        ></iframe>\n      </div>\n      <div className=\"videoRow\">\n        {comments.map((video, index) => {\n          return (\n            <div className=\"videoInfo\" key={index}>\n              <div className=\"videoPlayer\" >\n                <img\n                  src={video.snippet.thumbnails.medium.url}\n                  alt={video.snippet.title}\n                  onClick={()=>navigateToPlayThisVideo(video.id)}\n                />\n              </div>\n              <div className=\"channelLogoAndInfo\">\n                <div className=\"channelLogo\">\n                <img\n                  src={video.snippet.thumbnails.medium.url}\n                  alt={video.snippet.channelTitle}\n                />\n                </div>\n                <div className=\"channelInfo\">\n                  <div className=\"channelDescription\" >\n                    <p onClick={()=>navigateToPlayThisVideo(video.id)}>{video.snippet.title}</p>\n                  </div>\n                  <div className=\"channelName\">\n                    <p>{video.snippet.channelTitle}</p>\n                  </div>\n                  <div className=\"viewsAndUploadTime\">\n                    {/* <p className=\"views\">{video.statistics.viewCount}</p> */}\n                    <span> . </span>\n                    <p className=\"uploadTime\">{video.Uploadtime}</p>\n                  </div>\n                  {/* <p style={{ color: \"red\" }}>{video.tag}</p> */}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}