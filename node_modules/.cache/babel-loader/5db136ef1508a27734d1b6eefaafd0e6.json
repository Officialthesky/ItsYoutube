{"ast":null,"code":"import _slicedToArray from \"/Users/theskymac/Desktop/Youtubeclone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/theskymac/Desktop/Youtubeclone/src/Components/Mainvideocontainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { videoPlayerInfo } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Mainvideocontainer(_ref) {\n  _s();\n\n  var _this = this;\n\n  var selectedTag = _ref.selectedTag;\n\n  // const [myFilteredData, setMyFilteredData] = useState(videoPlayerInfo);\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      videos = _useState2[0],\n      setVideos = _useState2[1];\n\n  var fetchVideos = function fetchVideos() {\n    var valueFromLocalStorage = getValueFromLocalStorage(\"videos\");\n\n    if (valueFromLocalStorage !== null) {\n      if (valueFromLocalStorage !== 0) {\n        setVideos(valueFromLocalStorage);\n        return;\n      }\n    }\n\n    axios({\n      method: \"GET\",\n      url: \"https://youtube.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&regionCode=IN&chart=mostPopular&key=\".concat(API_KEY),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(function (res) {\n      // showing permanent value from local storage\n      setValueInLocalStorage(\"videos\", res.data.items); // showing temporary value\n\n      setVideos(res.data.items);\n    }).catch(function (error) {\n      console.log(error);\n      alert(error.response.data.message);\n    });\n  };\n\n  useEffect(function () {\n    fetchVideos();\n  }, []); // useEffect(() => {\n  //   const fltData = videoPlayerInfo.filter(\n  //     (item, index) => item?.tag === selectedTag?.toLowerCase()\n  //   );\n  //   if (selectedTag === \"all\") {\n  //     setMyFilteredData(videoPlayerInfo);\n  //   } else {\n  //     setMyFilteredData(fltData);\n  //   }\n  // }, [selectedTag]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: videos.map(function (videoPlayer, index) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"videosColumn\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: videoPlayer.snippet.thumbnails.medium.url,\n          alt: videoPlayer.snippet.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: videoPlayer.snippet.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, _this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this) // <div className=\"mainVideoContainer\">\n  //   <hr></hr>\n  //   <div className=\"videoRow\">\n  //     {myFilteredData.map((video, index) => {\n  //       return (\n  //         <div className=\"videoInfo\" key={index}>\n  //           <div className=\"videoPlayer\">\n  //             <img\n  //               alt={video.Description}\n  //               // width=\"280px\"\n  //               // height=\"160px\"\n  //               src={video.Videoimg}\n  //             />\n  //           </div>\n  //           <div className=\"channelLogoAndInfo\">\n  //             <div className=\"channelLogo\">\n  //               <img alt=\"video-logo\" src={video.logo} />\n  //             </div>\n  //             <div className=\"channelInfo\">\n  //               <div className=\"channelDescription\">\n  //                 <p>{video.Description}</p>\n  //               </div>\n  //               <div className=\"channelName\">\n  //                 <p>{video.ChannelName}</p>\n  //               </div>\n  //               <div className=\"viewsAndUploadTime\">\n  //                 <p className=\"views\">{video.Views}</p>\n  //                 <span> . </span>\n  //                 <p className=\"uploadTime\">{video.Uploadtime}</p>\n  //               </div>\n  //               {/* <p style={{ color: \"red\" }}>{video.tag}</p> */}\n  //             </div>\n  //           </div>\n  //         </div>\n  //       );\n  //     })}\n  //   </div>\n  // </div>\n  ;\n}\n\n_s(Mainvideocontainer, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n\n_c = Mainvideocontainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mainvideocontainer\");","map":{"version":3,"sources":["/Users/theskymac/Desktop/Youtubeclone/src/Components/Mainvideocontainer/index.js"],"names":["React","useState","useEffect","videoPlayerInfo","Mainvideocontainer","selectedTag","videos","setVideos","fetchVideos","valueFromLocalStorage","getValueFromLocalStorage","axios","method","url","API_KEY","headers","Accept","then","res","setValueInLocalStorage","data","items","catch","error","console","log","alert","response","message","map","videoPlayer","index","snippet","thumbnails","medium","title"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,SAASC,eAAT,QAAgC,QAAhC;;AAEA,eAAe,SAASC,kBAAT,OAA6C;AAAA;;AAAA;;AAAA,MAAfC,WAAe,QAAfA,WAAe;;AAC1D;AAEA,kBAA4BJ,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOK,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,qBAAqB,GAAGC,wBAAwB,CAAC,QAAD,CAAtD;;AACA,QAAID,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,UAAIA,qBAAqB,KAAK,CAA9B,EAAiC;AAC/BF,QAAAA,SAAS,CAACE,qBAAD,CAAT;AACA;AACD;AACF;;AAEDE,IAAAA,KAAK,CAAC;AACJC,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,4HAAqHC,OAArH,CAFC;AAGJC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT;AAHL,KAAD,CAAL,CAQGC,IARH,CAQQ,UAACC,GAAD,EAAS;AACb;AACAC,MAAAA,sBAAsB,CAAC,QAAD,EAAWD,GAAG,CAACE,IAAJ,CAASC,KAApB,CAAtB,CAFa,CAGb;;AACAd,MAAAA,SAAS,CAACW,GAAG,CAACE,IAAJ,CAASC,KAAV,CAAT;AACD,KAbH,EAcGC,KAdH,CAcS,UAACC,KAAD,EAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,MAAAA,KAAK,CAACH,KAAK,CAACI,QAAN,CAAeP,IAAf,CAAoBQ,OAArB,CAAL;AACD,KAjBH;AAkBD,GA3BD;;AA4BA1B,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT,CAjC0D,CAsC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,cACCF,MAAM,CAACuB,GAAP,CAAW,UAACC,WAAD,EAAcC,KAAd,EAAwB;AAClC,0BACE;AAAiB,QAAA,SAAS,EAAC,cAA3B;AAAA,gCACE;AACE,UAAA,GAAG,EAAED,WAAW,CAACE,OAAZ,CAAoBC,UAApB,CAA+BC,MAA/B,CAAsCrB,GAD7C;AAEE,UAAA,GAAG,EAAEiB,WAAW,CAACE,OAAZ,CAAoBG;AAF3B;AAAA;AAAA;AAAA;AAAA,iBADF,eAKE;AAAA,oBAAKL,WAAW,CAACE,OAAZ,CAAoBG;AAAzB;AAAA;AAAA;AAAA;AAAA,iBALF;AAAA,SAAUJ,KAAV;AAAA;AAAA;AAAA;AAAA,eADF;AASD,KAVA;AADD;AAAA;AAAA;AAAA;AAAA,UADF,CAcE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDF;AAqDD;;GAtGuB3B,kB;;KAAAA,kB","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./index.css\";\r\nimport { videoPlayerInfo } from \"./data\";\r\n\r\nexport default function Mainvideocontainer({ selectedTag }) {\r\n  // const [myFilteredData, setMyFilteredData] = useState(videoPlayerInfo);\r\n\r\n  const [videos, setVideos] = useState([]);\r\n\r\n  const fetchVideos = () => {\r\n    const valueFromLocalStorage = getValueFromLocalStorage(\"videos\");\r\n    if (valueFromLocalStorage !== null) {\r\n      if (valueFromLocalStorage !== 0) {\r\n        setVideos(valueFromLocalStorage);\r\n        return;\r\n      }\r\n    }\r\n\r\n    axios({\r\n      method: \"GET\",\r\n      url: `https://youtube.googleapis.com/youtube/v3/videos?part=snippet&maxResults=50&regionCode=IN&chart=mostPopular&key=${API_KEY}`,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // showing permanent value from local storage\r\n        setValueInLocalStorage(\"videos\", res.data.items);\r\n        // showing temporary value\r\n        setVideos(res.data.items);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(error.response.data.message);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchVideos();\r\n  }, []);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const fltData = videoPlayerInfo.filter(\r\n  //     (item, index) => item?.tag === selectedTag?.toLowerCase()\r\n  //   );\r\n  //   if (selectedTag === \"all\") {\r\n  //     setMyFilteredData(videoPlayerInfo);\r\n  //   } else {\r\n  //     setMyFilteredData(fltData);\r\n  //   }\r\n  // }, [selectedTag]);\r\n\r\n  return (\r\n    <div>\r\n    {videos.map((videoPlayer, index) => {\r\n      return (\r\n        <div key={index} className=\"videosColumn\">\r\n          <img\r\n            src={videoPlayer.snippet.thumbnails.medium.url}\r\n            alt={videoPlayer.snippet.title}\r\n          />\r\n          <h1>{videoPlayer.snippet.title}</h1>\r\n        </div>\r\n      );\r\n    })}\r\n  </div>\r\n    // <div className=\"mainVideoContainer\">\r\n    //   <hr></hr>\r\n    //   <div className=\"videoRow\">\r\n    //     {myFilteredData.map((video, index) => {\r\n    //       return (\r\n    //         <div className=\"videoInfo\" key={index}>\r\n    //           <div className=\"videoPlayer\">\r\n    //             <img\r\n    //               alt={video.Description}\r\n    //               // width=\"280px\"\r\n    //               // height=\"160px\"\r\n    //               src={video.Videoimg}\r\n    //             />\r\n    //           </div>\r\n    //           <div className=\"channelLogoAndInfo\">\r\n    //             <div className=\"channelLogo\">\r\n    //               <img alt=\"video-logo\" src={video.logo} />\r\n    //             </div>\r\n    //             <div className=\"channelInfo\">\r\n    //               <div className=\"channelDescription\">\r\n    //                 <p>{video.Description}</p>\r\n    //               </div>\r\n    //               <div className=\"channelName\">\r\n    //                 <p>{video.ChannelName}</p>\r\n    //               </div>\r\n    //               <div className=\"viewsAndUploadTime\">\r\n    //                 <p className=\"views\">{video.Views}</p>\r\n    //                 <span> . </span>\r\n    //                 <p className=\"uploadTime\">{video.Uploadtime}</p>\r\n    //               </div>\r\n    //               {/* <p style={{ color: \"red\" }}>{video.tag}</p> */}\r\n    //             </div>\r\n    //           </div>\r\n    //         </div>\r\n    //       );\r\n    //     })}\r\n    //   </div>\r\n    // </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}